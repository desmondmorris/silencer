// Generated by CoffeeScript 1.5.0
(function() {

  $(function() {
    var User, addTerm, current_user, filterEspn, filterFacebook, filterTwitter, first, genericFilter, getTerms, hideChild, injectJquery, makeTermArray, removeTerm, storeTerms;
    Array.prototype.remove = function() {
      var ax, what;
      while (arguments.length && this.length) {
        what = arguments[--arguments.length];
        while ((ax = this.indexOf(what)) !== -1) {
          this.splice(ax, 1);
        }
      }
      return this;
    };
    injectJquery = function() {
      var body, script;
      script = document.createElement("script");
      script.type = "text/javascript";
      script.src = "/lib/jquery-1.9.1.min.js";
      body = document.getElementsByTagName("body")[0];
      return body.appendChild(script);
    };
    storeTerms = function(terms) {
      return localStorage.setItem("myFilteredTerms", JSON.stringify(terms));
    };
    getTerms = function() {
      var item, myList, myNewList, terms, _i, _len;
      myList = localStorage.getItem("myFilteredTerms");
      myNewList = JSON.parse(myList);
      terms = [];
      for (_i = 0, _len = myNewList.length; _i < _len; _i++) {
        item = myNewList[_i];
        terms.push(item['term'].toLowerCase());
      }
      return terms;
    };
    addTerm = function(newTerm, termArray) {
      termArray.push({
        "term": newTerm
      });
      return storeTerms(termArray);
    };
    removeTerm = function(termToBeRemoved) {
      var newTermList, term, terms, _i, _j, _len, _len1;
      terms = getTerms();
      for (_i = 0, _len = terms.length; _i < _len; _i++) {
        term = terms[_i];
        if (term === termToBeRemoved) {
          terms.remove(term);
        }
      }
      newTermList = [];
      for (_j = 0, _len1 = terms.length; _j < _len1; _j++) {
        term = terms[_j];
        newTermList.push({
          "term": term
        });
      }
      return storeTerms(newTermList);
    };
    makeTermArray = function() {
      var term, termArray, terms, _i, _len;
      termArray = [];
      terms = getTerms();
      for (_i = 0, _len = terms.length; _i < _len; _i++) {
        term = terms[_i];
        termArray.push({
          "term": "" + term
        });
      }
      return termArray;
    };
    hideChild = function(child) {
      return child.slideUp();
    };
    genericFilter = function(parentNode) {
      var child, children, parent, term, _i, _len, _results;
      parent = parentNode;
      children = parentNode.children();
      _results = [];
      for (_i = 0, _len = children.length; _i < _len; _i++) {
        child = children[_i];
        _results.push((function() {
          var _j, _len1, _ref, _results1;
          _ref = current_user.terms;
          _results1 = [];
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            term = _ref[_j];
            if ($(child).is(":visible")) {
              if ($($(child)).text().toLowerCase().indexOf(term.toLowerCase()) > -1) {
                _results1.push(hideChild($(child)));
              } else {
                _results1.push(void 0);
              }
            } else {
              _results1.push(void 0);
            }
          }
          return _results1;
        })());
      }
      return _results;
    };
    User = (function() {

      function User() {}

      User.prototype.terms = getTerms();

      User.prototype.termCount = getTerms().length;

      User.prototype.email = null;

      User.prototype.sessionId = null;

      User.prototype.name = null;

      return User;

    })();
    filterTwitter = function() {
      if ($(".route-home").length) {
        return genericFilter($('.stream-items'));
      }
    };
    filterFacebook = function() {
      var child, children, stream, term, termList, _i, _len, _results;
      termList = getTerms();
      stream = $(".uiStream");
      children = $(stream).children(".genericStreamStory");
      _results = [];
      for (_i = 0, _len = children.length; _i < _len; _i++) {
        child = children[_i];
        _results.push((function() {
          var _j, _len1, _results1;
          _results1 = [];
          for (_j = 0, _len1 = termList.length; _j < _len1; _j++) {
            term = termList[_j];
            if ($(child).text().toLowerCase().indexOf(term.toLowerCase()) > -1) {
              _results1.push($(child).slideUp());
            } else {
              _results1.push(void 0);
            }
          }
          return _results1;
        })());
      }
      return _results;
    };
    filterEspn = function() {
      return genericFilter($('.headlines'));
    };
    current_user = new User;
    if (!localStorage['myFilteredTerms']) {
      first = {
        "term": "please enter a term to filter"
      };
      localStorage.setItem('myFilteredTerms', JSON.stringify(first));
    }
    if (document.URL.indexOf('facebook') > -1) {
      injectJquery();
      filterFacebook();
      setInterval(filterFacebook, 4000);
    }
    if (document.URL.indexOf('twitter') > -1) {
      filterTwitter();
      setInterval(filterTwitter, 4000);
    }
    if (document.URL.indexOf('espn') > -1) {
      filterEspn();
      setInterval(filterEspn, 4000);
    }
    return chrome.extension.onMessage.addListener(function(message, sender, sendResponse) {
      var termArray;
      termArray = makeTermArray();
      console.log(message);
      if (message !== "showTerms") {
        if (message.substring(0, 3) === "add") {
          message = message.slice(3);
          addTerm(message, termArray);
          return sendResponse(termArray);
        } else if (message.substring(0, 6) === "remove") {
          message = message.slice(6);
          if (confirm("are you sure you want to remove this filter?")) {
            removeTerm(message);
            return sendResponse(termArray);
          }
        }
      } else {
        return sendResponse(getTerms());
      }
    });
  });

}).call(this);
